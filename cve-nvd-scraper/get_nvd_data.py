import sys
csv_out_loc = sys.argv[1] if len(sys.argv) > 1 else "out/cve_nvd.csv"

import requests
import datetime
import os
import tqdm
import gzip as gz
import shutil
import jq
import pandas as pd
import json

file_exists = os.path.exists('CVE-NVD')
if not file_exists:
  os.mkdir('CVE-NVD')
  os.mkdir('CVE-NVD/GZIP')
  os.mkdir('CVE-NVD/JSON')

now = datetime.datetime.now()
#PROTIP wrap an iterative loop in python with tqdm.tqdm() and you get a progress bar
for i in tqdm.tqdm(range(1999,now.year+1)):
    url = f'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-{i}.json.gz'
    req = requests.get(url, stream=True)
    with open('CVE-NVD/GZIP/nvdcve-1.1-'+str(i)+'.json.gz', 'wb') as f:
        for chunk in req.iter_content(chunk_size=1024):
            if chunk:
                f.write(chunk)
                f.flush()
# Unzip
for i in tqdm.tqdm(range(1999,now.year+1)):
    with gz.open(f'CVE-NVD/GZIP/nvdcve-1.1-{i}.json.gz', 'rb') as f_in:
        with open(f'CVE-NVD/JSON/nvdcve-1.1-{i}.json', 'wb')  as f_out:
            shutil.copyfileobj(f_in, f_out)

# JSON to CSV
cve_id_query = jq.compile(".CVE_Items[].cve.CVE_data_meta.ID")
cve_publication_query = jq.compile(".CVE_Items[].publishedDate")
cve_assigner_query = jq.compile(".CVE_Items[].cve.CVE_data_meta.ASSIGNER")
cve_description_query = jq.compile(".CVE_Items[].cve.description.description_data[].value")
cvss_v2_score_query = jq.compile(".CVE_Items[].impact.baseMetricV2.cvssV2.baseScore")
cvss_v2_exploitability_score_query = jq.compile(".CVE_Items[].impact.baseMetricV2.cvssV2.exploitabilityScore")
cvss_v2_vector_query = jq.compile(".CVE_Items[].impact.baseMetricV2.cvssV2.vectorString")
cvss_v3_score_query = jq.compile(".CVE_Items[].impact.baseMetricV3.cvssV3.baseScore")
cvss_v3_exploitability_score_query = jq.compile(".CVE_Items[].impact.baseMetricV3.cvssV3.exploitabilityScore")
cvss_v3_vector_query = jq.compile(".CVE_Items[].impact.baseMetricV3.cvssV3.vectorString")
cwe_query = jq.compile(".CVE_Items[].cve.problemtype.problemtype_data[].description[].value")
now = datetime.datetime.now()
collector = []
for i in tqdm.tqdm(range(2002, now.year+1)):
    with open('CVE-NVD/JSON/nvdcve-1.1-'+str(i)+'.json') as json_file:
        data = json.load(json_file)
        pubs = cve_publication_query.input(data).text()
        pubs = pubs.split('\n')
        pubs = [pd.to_datetime(ts.strip('"'), yearfirst=True, infer_datetime_format=True) for ts in pubs]
        index= pd.Series(pubs,name='Publication')
        cves = cve_id_query.input(data).text()
        cves = cves.split('\n')
        cves = [cve.strip('"') for cve in cves]
        assigners = cve_assigner_query.input(data).text()
        assigners = assigners.split('\n')
        description = cve_description_query.input(data).text()
        description = description.split('\n')
        cvss_v2 = cvss_v2_score_query.input(data).text()
        cvss_v2 = cvss_v2.split('\n')
        cvss_v2_vector = cvss_v2_vector_query.input(data).text()
        cvss_v2_vector = cvss_v2_vector.split('\n')
        cvss_v2_exploitability = cvss_v2_exploitability_score_query.input(data).text()
        cvss_v2_exploitability = cvss_v2_exploitability.split('\n')
        cvss_v3 = cvss_v3_score_query.input(data).text()
        cvss_v3 = cvss_v3.split('\n')
        cvss_v3_vector = cvss_v3_vector_query.input(data).text()
        cvss_v3_vector = cvss_v3_vector.split('\n')
        cvss_v3_exploitability = cvss_v3_exploitability_score_query.input(data).text()
        cvss_v3_exploitability = cvss_v3_exploitability.split('\n')
        cwe = cwe_query.input(data).text()
        cwe = cwe.split('\n')
        s1 = pd.Series(cves,name='ID')
        s2 = pd.Series(assigners,name='ASSIGNER')
        s3 = pd.Series(description,name='DESCRIPTION')
        ones = [1]*len(cves)
        s4 = pd.Series(ones,name='Count')
        s5 = pd.Series(cvss_v2,name='v2 CVSS')
        s6 = pd.Series(cvss_v2_vector,name='v2 Vector')
        s7 = pd.Series(cvss_v2_exploitability,name='v2 Exploitability Score')
        s8 = pd.Series(cvss_v3,name='v3 CVSS')
        s9 = pd.Series(cvss_v3_vector,name='v3 Vector')
        s10 = pd.Series(cvss_v3_exploitability,name='v3 Expoitability Score')
        s11 = pd.Series(cwe,name='CWE')
        vulns = pd.concat([index,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11], axis=1)
        vulns = vulns.set_index('Publication')
        collector.append(vulns)
        json_file.close()

all_items = pd.concat(collector)

all_items.sort_index()
all_items.to_csv(csv_out_loc)